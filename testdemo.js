
const {打印} = require("./cnCode")


// 打印.日志("666") //输出:666
// 打印.报错("啥") //输出:啥
 
// const {若} = require('./cnCode')

// const 小明 = {职业:"AV女星",姓名:"小明"}
// const 小刚 = {职业:"无业游民",姓名:"小刚"}
// const 小红 = {职业:"主持人",姓名:"小红"}

// const 检测职业=(人=小明)=>{
//     若(人.职业==="保安",()=>{
//         打印.日志(`检测${人.姓名}职业为保安 可以进入安保厅`);
//     })
//     .或若(人.职业==="AV女星",()=>{
//         打印.日志(`检测${人.姓名}职业是AV女星 可以进入后台`);
//     })
//     .或若(人.职业==="主持人",()=>{
//         打印.日志(`检测${人.姓名}职业是主持人 可以进入表演厅`);
//     })
//     .反之(()=>{
//         打印.日志(`检测${人.姓名}无许可 禁止入内`);
//     })
// }
// 检测职业(小明)
// // 检测小明职业是AV女星 可以进入后台
// 检测职业(小刚)
// // 检测小刚无许可 禁止入内
// 检测职业(小红)
// 检测小红职业是主持人 可以进入表演厅

// 对号入座 ( switch)
// const {对号入座} = require("./cnCode")
// //参数 对号入座(检测数据: any, 默认值?: null) 
// const 权限检查1 = (权限值) => {
//     对号入座(权限值)
//         .为(1).则(()=>打印.日志("通过"))
//         .为(0).则(()=>打印.日志("禁止"))
    
    
// }
// const check1 = (value) => {
//     const res =cnSwitch(权限值)
//         .is(1).then(()=>"通过")
//         .is(0).then(()=>"禁止")
//         .Return
    
    
// }
// 权限检查1(2) //输出 null
// 权限检查1(1) //输出 通过
// 权限检查1(0) //输出 禁止


// const 带返回值权限检查 = (权限值) => {
//     const res = 对号入座(权限值)
//         .为(1).则(()=>"通过")
//         .为(0).则(()=>"拒绝")
//         .匹配值
//     打印.日志(res);
//     return res
// }
// 带返回值权限检查(10) //输出 null
// 带返回值权限检查(1) //输出 通过
// 带返回值权限检查(0) //输出 禁止

// const 带返回值默认值权限检查 = (权限值) => {
//     const res = 对号入座(权限值,"这是个什么玩意没见过") //
//         .为(1).则(()=>"通过")
//         .为(0).则(()=>"拒绝")
//         .匹配值
//     打印.日志(res);
//     return res
// }
// 带返回值默认值权限检查(10) //输出 这是个什么玩意没见过
// 带返回值默认值权限检查(1) // 输出 通过
// 带返回值默认值权限检查(0) //输出 禁止


// const {固定循环} = require('./cnCode')

// 固定循环({ 次数: 3, 动作: (n) => 打印.日志(`第${n}次`) })
/*
输出:
第1次
第2次
第3次
 */
// const {cnfor} = require('./cnCode') 同理 方便英文输入使用
// cnfor({ count: 3, action: (n) => console.log(`第${n}次`) })

// let n1 = "嘎"
// const {条件循环} = require('./cnCode')

// 条件循环(
//     {
//         条件函数: () => n1 != "嘎嘎嘎嘎嘎", //条件函数返回布尔值 当返回值为false时 停止动作
//         动作函数: () => {

//             n1 += "嘎"
//             打印.日志(n1)

//         },
//         前置运行: true,//可选 默认不前置运行一次
//         结束动作: (n) => { //可选 会默认传入运行次数
//             打印.日志(`结束了一共运行了${n}遍`,)
//         }

//     })

/*
输出:
嘎嘎
嘎嘎嘎
嘎嘎嘎嘎
嘎嘎嘎嘎嘎
结束了一共运行了4遍
*/
// const {cnWhile} = require('./cnCode') 同理 方便英文输入使用
// cnWhile({
//     condition: () => n1 != "嘎嘎嘎嘎嘎",
//     action:() => {

//         n1 += "嘎"
//         打印.日志(n1)

//     },
//     preRun:true,
//     endcallback:(n) => { //可选 会默认传入运行次数
//         打印.日志(`结束了一共运行了${n}遍`,)
//     }
// })


// const {数组工具,arrTool} = require('./cnCode')
// const arr1 = [1,2,3,4,5,6,"非常溜",7,8,90,0,2,3,4,5,"无敌","很强"]
// const arr2 = 数组工具.切片(arr1,-5,-1)//arrTool.slice(arr1,-5,-1)
// const arr3 = 数组工具.切片(arr1,0,-1)//arrTool.slice(arr1,0,-1)

// 打印.日志(arr2);
//输出: [ 3, 4, 5, '无敌', '很强' ]

// 打印.日志(arr3);
//输出:[1,2,3,4,5,6,"非常溜",7,8,90,0,2,3,4,5,"无敌","很强"]

// const arr4 = 数组工具.去重(arr1) // arrTool.nrepeat(arr1)
// 打印.日志(arr4);
//输出:[1,2,3,4,5,6,"非常溜",7,8,90,0,"无敌","很强"]

// 数组工具.删除元素("非常溜",arr4) // arrTool.delete("非常溜",arr4)
// 打印.日志(arr4);
//输出:[1,2,3,4,5,6,7,8,90,0,"无敌","很强"]
// const {时间} = require('./cnCode')
// const { cnSwitch } = require("./flow")
// 时间.同步等待(2000,true)
// 同步等待: (秒数?: number 毫秒, 开启日志?: boolean) => void
/*
开始等待
等待计时: 2.000s
 */
// 时间.异步等待(()=>{ //自动清除计时器标识
//     // 异步等待: (回调函数?: () => void, 秒数?: number 毫秒) => void
//     打印.日志(666)
// },1000)

// const 清理函数 = 时间.循环定时器((n)=>{ //返回清理当前循环计时器标识的函数 
//     打印.日志(n)
// },1000)
/**
循环定时器: (回调函数?: (n?: 次数) => void, 秒数?: number 毫秒) => {
    清理函数: () => void;
}
输出
1
2
3
4
5
6
7
.....
 */
/*
const {time} = require('./cnCode') 方便英文输入使用
time.sleep(2000)
time.timeout(()=>{
    console.log(666);
},1000)
const clear = time.interval((n)=>{
    console.log(n);
},1000)
*/
const {错误处理} = require('./cnCode')

const 这玩意肯定报错 = () => {

    const arr = 1
    arr.push(2) //  这玩意没push方法
}

// 这玩意肯定报错() 
// TypeError: arr.push is not a function
// 终止运行

错误处理
.运行(这玩意肯定报错)
.捕获((错误)=>{
    打印.日志("错误内容",错误);
    打印.日志('完成捕获不影响运行');
})
//错误内容 TypeError: arr.push is not a function
//完成捕获不影响运行